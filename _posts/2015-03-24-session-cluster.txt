---
layout: default
title: Session Sharing in cluster (集群中会话共享）
---

<h2>{{ page.title }}</h2>
<p> 如果session没有在集群的各个节点中共享，从集群中移除一个节点会导致该节点对应的session丢失，原因是一个个session 只存贮在集群中一个节点的内存中。如果session在集群的各个节点中是共享的，那么移除任何一个节点将不会造成session的丢失，用户的会话将不会丢失，集群中的其它节点可以继续处理来自用户的请求。下面我们将介绍一种常用的session 集群机制

<h4>Tomcat 集群</h4>
tomcat 自带的集群是将session复制到所有集群中的tomcat节点上面， 所有的session在所有的节点中都有一个备份。

这是tomcat标准session共享机制，但是我们不推荐这样用，随着越来越多的节点加入到集群，session 复制将会成为一个巨大的工程，session在大量节点中复制会带来巨大的网络开销。

<h4>session 存储在DB中</h4>
比较简单，此方案数据库访问是瓶颈，集群中的节点处理请求时需要将session load到内存中，session有改动需要及写回数据库中；另外还要考虑session过期需要充数据库清除，这里需要额外的周期性任务做这件事
不推荐用

<h4>外部session cache</h4>
将一个外部的session cache运行在集群的局域网中，用于存贮所有节点的session。
1.外部cache有Memcached 和 Terracotta产品，使用外部cache需要考虑的问题
2.外部cache的负载，所有请求都要到这里来拿session
3.需要建立额外的application，包括管理，监控，外部cache 出问题时如何紧急处理流程也要考虑
4.防止外部cache单节点故障，需要配置failover，因此对外部cache 建立集群或者最少建立一个fail-over 节点

<h4>将session存储在cookie中</h4>
还有一种简单的解决方案是将session存储在浏览器端的cookie中，session 在user第一次访问的时候返回给浏览器端并存贮到cookie中， 之后浏览器端的每个请求都会包含这个session的信息。

我们需要一个servlet filter 做如下的事情
1. 把http request中的cookie反序列化成Session
2. 序列化session 成cookie并放入http response

</p>
<p>{{ page.date | date_to_string }}</p>